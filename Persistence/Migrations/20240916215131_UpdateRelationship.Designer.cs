// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240916215131_UpdateRelationship")]
    partial class UpdateRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("activityLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("gender")
                        .HasColumnType("TEXT");

                    b.Property<bool>("hasDietPlan")
                        .HasColumnType("INTEGER");

                    b.Property<float>("height")
                        .HasColumnType("REAL");

                    b.Property<float>("weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.DietGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<float>("calories")
                        .HasColumnType("REAL");

                    b.Property<float>("carbs")
                        .HasColumnType("REAL");

                    b.Property<float>("fats")
                        .HasColumnType("REAL");

                    b.Property<float>("proteins")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("DietGoals");
                });

            modelBuilder.Entity("Domain.DietGoalFoods", b =>
                {
                    b.Property<Guid>("FoodId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("TEXT");

                    b.Property<double>("amountConsumed")
                        .HasColumnType("REAL");

                    b.HasKey("FoodId", "GoalId");

                    b.HasIndex("GoalId");

                    b.ToTable("DietGoalFoods");
                });

            modelBuilder.Entity("Domain.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("BetaCarotene")
                        .HasColumnType("REAL");

                    b.Property<double>("Caffeine")
                        .HasColumnType("REAL");

                    b.Property<double>("Calcium")
                        .HasColumnType("REAL");

                    b.Property<double>("Calories")
                        .HasColumnType("REAL");

                    b.Property<double>("Carbs")
                        .HasColumnType("REAL");

                    b.Property<double>("Cholesterol")
                        .HasColumnType("REAL");

                    b.Property<double>("Fats")
                        .HasColumnType("REAL");

                    b.Property<double>("Fiber")
                        .HasColumnType("REAL");

                    b.Property<double>("Folate")
                        .HasColumnType("REAL");

                    b.Property<double>("Iron")
                        .HasColumnType("REAL");

                    b.Property<double>("Magnesium")
                        .HasColumnType("REAL");

                    b.Property<double>("MonounsaturatedFattyAcids")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("PolyunsaturatedFattyAcids")
                        .HasColumnType("REAL");

                    b.Property<double>("Potassium")
                        .HasColumnType("REAL");

                    b.Property<double>("Proteins")
                        .HasColumnType("REAL");

                    b.Property<double>("Retinol")
                        .HasColumnType("REAL");

                    b.Property<double>("SaturatedFattyAcids")
                        .HasColumnType("REAL");

                    b.Property<double>("Sodium")
                        .HasColumnType("REAL");

                    b.Property<double>("Sugars")
                        .HasColumnType("REAL");

                    b.Property<double>("VitaminA")
                        .HasColumnType("REAL");

                    b.Property<double>("VitaminB12")
                        .HasColumnType("REAL");

                    b.Property<double>("VitaminC")
                        .HasColumnType("REAL");

                    b.Property<double>("VitaminD")
                        .HasColumnType("REAL");

                    b.Property<double>("VitaminK")
                        .HasColumnType("REAL");

                    b.Property<double>("Zinc")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Domain.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<double>("BetaCarotene")
                        .HasColumnType("REAL");

                    b.Property<double>("Caffeine")
                        .HasColumnType("REAL");

                    b.Property<double>("Calcium")
                        .HasColumnType("REAL");

                    b.Property<double>("Cholesterol")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("DietGoalId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Fiber")
                        .HasColumnType("REAL");

                    b.Property<double>("Folate")
                        .HasColumnType("REAL");

                    b.Property<double>("Iron")
                        .HasColumnType("REAL");

                    b.Property<double>("Magnesium")
                        .HasColumnType("REAL");

                    b.Property<double>("MonounsaturatedFattyAcids")
                        .HasColumnType("REAL");

                    b.Property<double>("PolyunsaturatedFattyAcids")
                        .HasColumnType("REAL");

                    b.Property<double>("Potassium")
                        .HasColumnType("REAL");

                    b.Property<double>("Retinol")
                        .HasColumnType("REAL");

                    b.Property<double>("SaturatedFattyAcids")
                        .HasColumnType("REAL");

                    b.Property<double>("Sodium")
                        .HasColumnType("REAL");

                    b.Property<double>("Sugars")
                        .HasColumnType("REAL");

                    b.Property<double>("VitaminA")
                        .HasColumnType("REAL");

                    b.Property<double>("VitaminB12")
                        .HasColumnType("REAL");

                    b.Property<double>("VitaminC")
                        .HasColumnType("REAL");

                    b.Property<double>("VitaminD")
                        .HasColumnType("REAL");

                    b.Property<double>("VitaminK")
                        .HasColumnType("REAL");

                    b.Property<double>("Zinc")
                        .HasColumnType("REAL");

                    b.Property<float>("calories")
                        .HasColumnType("REAL");

                    b.Property<float>("carbs")
                        .HasColumnType("REAL");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<float>("fats")
                        .HasColumnType("REAL");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<float>("proteins")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DietGoalId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Domain.WeightIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("TEXT");

                    b.Property<float>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("WeightIns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.DietGoal", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithOne("DietGoal")
                        .HasForeignKey("Domain.DietGoal", "AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.DietGoalFoods", b =>
                {
                    b.HasOne("Domain.Food", "Food")
                        .WithMany("DietGoals")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DietGoal", "DietGoal")
                        .WithMany("Foods")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietGoal");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Domain.Meal", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("Meals")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Domain.DietGoal", "DietGoal")
                        .WithMany("Meals")
                        .HasForeignKey("DietGoalId");

                    b.Navigation("AppUser");

                    b.Navigation("DietGoal");
                });

            modelBuilder.Entity("Domain.WeightIn", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("WeightIns")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Navigation("DietGoal");

                    b.Navigation("Meals");

                    b.Navigation("WeightIns");
                });

            modelBuilder.Entity("Domain.DietGoal", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Domain.Food", b =>
                {
                    b.Navigation("DietGoals");
                });
#pragma warning restore 612, 618
        }
    }
}
